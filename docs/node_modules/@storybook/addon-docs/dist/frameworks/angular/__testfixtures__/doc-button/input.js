"use strict";

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.reduce");

require("core-js/modules/es.array.reverse");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.parse-int");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputComponent = exports.exportedConstant = void 0;

var _core = require("@angular/core");

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class2, _class3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _temp;

function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

var exportedConstant = 'An exported constant';
exports.exportedConstant = exportedConstant;

/**
 * This is a simple button that demonstrates various JSDoc handling in Storybook Docs for Angular.
 *
 * It supports [markdown](https://en.wikipedia.org/wiki/Markdown), so you can embed formatted text,
 * like **bold**, _italic_, and `inline code`.
 *
 * > How you like dem apples?! It's never been easier to document all your components.
 *
 * @string Hello world
 * @link [Example](http://example.com)
 * @code `ThingThing`
 * @html <span class="badge">aaa</span>
 */
var InputComponent = (_dec = (0, _core.Component)({
  selector: 'doc-button'
}), _dec2 = (0, _core.ViewChild)('buttonRef', {
  "static": false
}), _dec3 = (0, _core.Input)(), _dec4 = (0, _core.Input)(), _dec5 = (0, _core.Input)(), _dec6 = (0, _core.Input)(), _dec7 = (0, _core.Input)(), _dec8 = (0, _core.Output)(), _dec9 = (0, _core.Input)(), _dec10 = (0, _core.HostListener)('click', ['$event.target']), _dec11 = (0, _core.HostBinding)('class.focused'), _dec12 = (0, _core.Input)('showKeyAlias'), _dec13 = (0, _core.Input)(), _dec(_class2 = (_class3 = (_temp = /*#__PURE__*/function () {
  function InputComponent() {
    _classCallCheck(this, InputComponent);

    _initializerDefineProperty(this, "buttonRef", _descriptor, this);

    _initializerDefineProperty(this, "appearance", _descriptor2, this);

    _initializerDefineProperty(this, "isDisabled", _descriptor3, this);

    _initializerDefineProperty(this, "label", _descriptor4, this);

    _initializerDefineProperty(this, "size", _descriptor5, this);

    _initializerDefineProperty(this, "somethingYouShouldNotUse", _descriptor6, this);

    _initializerDefineProperty(this, "onClick", _descriptor7, this);

    this._inputValue = 'some value';

    _initializerDefineProperty(this, "focus", _descriptor8, this);

    this.ignoredProperty = 'Ignore me';
    this.internalProperty = 'Public hello';
    this._value = 'Private hello';

    _initializerDefineProperty(this, "showKey", _descriptor9, this);

    this.processedItem = void 0;
  }

  _createClass(InputComponent, [{
    key: "handleClick",

    /**
     * This is an internal method that we don't want to document and have added the `ignore` annoation to.
     *
     * @ignore
     */
    value: function handleClick(event) {
      event.stopPropagation();

      if (!this.isDisabled) {
        this.onClick.emit(event);
      }
    }
  }, {
    key: "onClickListener",
    value: function onClickListener(btn) {
      console.log('button', btn);
    }
  }, {
    key: "calc",

    /**
     * An internal calculation method which adds `x` and `y` together.
     *
     * @param x Some number you'd like to use.
     * @param y Some other number or string you'd like to use, will have `parseInt()` applied before calculation.
     */
    value: function calc(x, y) {
      return x + parseInt("".concat(y), 10);
    }
    /** A public method using an interface. */

  }, {
    key: "publicMethod",
    value: function publicMethod(things) {
      console.log(things);
    }
    /**
     * A protected method.
     *
     * @param id Some `id`.
     */

  }, {
    key: "protectedMethod",
    value: function protectedMethod(id) {
      console.log(id);
    }
    /**
     * A private method.
     *
     * @param password Some `password`.
     */

  }, {
    key: "privateMethod",
    value: function privateMethod(password) {
      console.log(password);
    }
  }, {
    key: "inputValue",

    /** Setter for `inputValue` that is also an `@Input`. */
    set: function set(value) {
      this._inputValue = value;
    }
    /** Getter for `inputValue`. */
    ,
    get: function get() {
      return this._inputValue;
    }
  }, {
    key: "classes",

    /**
     * Returns all the CSS classes for the button.
     *
     * @ignore
     */
    get: function get() {
      return [this.appearance, this.size].filter(function (_class) {
        return !!_class;
      }).map(function (_class) {
        return "btn-".concat(_class);
      });
    }
    /**
     * @ignore
     */

  }, {
    key: "value",

    /** Set the private value. */
    set: function set(value) {
      this._value = "".concat(value);
    }
    /** Get the private value. */
    ,
    get: function get() {
      return this._value;
    }
  }, {
    key: "item",
    set: function set(item) {
      this.processedItem = item;
    }
  }]);

  return InputComponent;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class3.prototype, "buttonRef", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class3.prototype, "appearance", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'secondary';
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "isDisabled", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, "label", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class3.prototype, "size", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'medium';
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class3.prototype, "somethingYouShouldNotUse", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor7 = _applyDecoratedDescriptor(_class3.prototype, "onClick", [_dec8], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return new _core.EventEmitter();
  }
}), _applyDecoratedDescriptor(_class3.prototype, "inputValue", [_dec9], Object.getOwnPropertyDescriptor(_class3.prototype, "inputValue"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "onClickListener", [_dec10], Object.getOwnPropertyDescriptor(_class3.prototype, "onClickListener"), _class3.prototype), _descriptor8 = _applyDecoratedDescriptor(_class3.prototype, "focus", [_dec11], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor9 = _applyDecoratedDescriptor(_class3.prototype, "showKey", [_dec12], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class3.prototype, "item", [_dec13], Object.getOwnPropertyDescriptor(_class3.prototype, "item"), _class3.prototype)), _class3)) || _class2);
exports.InputComponent = InputComponent;