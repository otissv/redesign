"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = _interopRequireDefault(require("path"));

var _express = require("express");

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _nodeLogger = require("@storybook/node-logger");

var _middleware = require("./utils/middleware");

var _logConfig = require("./logConfig");

var _config = _interopRequireDefault(require("./config"));

var _managerConfig = _interopRequireDefault(require("./manager/manager-config"));

var _resolvePathInSbCache = require("./utils/resolve-path-in-sb-cache");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var dllPath = _path.default.join(__dirname, '../../dll');

var cache = {};
var previewProcess;
var previewReject;
var resolved = false;
var router = new _express.Router();

function _default(options) {
  var configDir = _path.default.resolve(options.configDir);

  var outputDir = options.smokeTest ? (0, _resolvePathInSbCache.resolvePathInStorybookCache)('public') : _path.default.resolve(options.outputDir || (0, _resolvePathInSbCache.resolvePathInStorybookCache)('public'));
  var configType = 'DEVELOPMENT';
  var startTime = process.hrtime();
  var managerTotalTime;
  var previewTotalTime;
  var managerPromise = (0, _managerConfig.default)(_objectSpread({
    configType: configType,
    outputDir: outputDir,
    configDir: configDir,
    cache: cache,
    corePresets: [require.resolve('./manager/manager-preset.js')]
  }, options)).then(function (config) {
    if (options.debugWebpack) {
      (0, _logConfig.logConfig)('Manager webpack config', config, _nodeLogger.logger);
    }

    var managerCompiler = (0, _webpack.default)(config);
    var devMiddlewareOptions = {
      publicPath: config.output.publicPath,
      writeToDisk: !!options.smokeTest,
      watchOptions: {
        aggregateTimeout: 2000,
        ignored: /node_modules/
      },
      // this actually causes 0 (regular) output from wdm & webpack
      logLevel: 'warn',
      clientLogLevel: 'warning',
      noInfo: true
    };
    var managerDevMiddlewareInstance = (0, _webpackDevMiddleware.default)(managerCompiler, devMiddlewareOptions);
    router.get(/\/static\/media\/.*\..*/, function (request, response, next) {
      response.set('Cache-Control', `public, max-age=31536000`);
      next();
    });
    router.use(managerDevMiddlewareInstance);
    return new Promise(function (resolve, reject) {
      managerDevMiddlewareInstance.waitUntilValid(function (stats) {
        managerTotalTime = process.hrtime(startTime);

        if (!stats) {
          reject(new Error('no stats after building preview'));
        } else if (stats.hasErrors()) {
          reject(stats);
        } else {
          resolve(stats);
        }
      });
    });
  });
  var previewPromise = options.ignorePreview ? new Promise(function (resolve) {
    return resolve();
  }) : (0, _config.default)(_objectSpread({
    configType: configType,
    outputDir: outputDir,
    cache: cache,
    corePresets: [require.resolve('./preview/preview-preset.js')],
    overridePresets: [require.resolve('./preview/custom-webpack-preset.js')]
  }, options)).then(function (previewConfig) {
    if (options.debugWebpack) {
      (0, _logConfig.logConfig)('Preview webpack config', previewConfig, _nodeLogger.logger);
    } // remove the leading '/'


    var publicPath = previewConfig.output.publicPath;

    if (publicPath[0] === '/') {
      publicPath = publicPath.slice(1);
    }

    var previewCompiler = (0, _webpack.default)(previewConfig);

    var devMiddlewareOptions = _objectSpread({
      publicPath: previewConfig.output.publicPath,
      watchOptions: _objectSpread({
        aggregateTimeout: 1,
        ignored: /node_modules/
      }, previewConfig.watchOptions || {}),
      // this actually causes 0 (regular) output from wdm & webpack
      logLevel: 'warn',
      clientLogLevel: 'warning',
      noInfo: true
    }, previewConfig.devServer);

    var previewDevMiddlewareInstance = (0, _webpackDevMiddleware.default)(previewCompiler, devMiddlewareOptions);
    router.use(previewDevMiddlewareInstance);
    router.use((0, _webpackHotMiddleware.default)(previewCompiler));
    return new Promise(function (resolve, reject) {
      previewReject = reject;
      previewDevMiddlewareInstance.waitUntilValid(function (stats) {
        resolved = true;
        previewTotalTime = process.hrtime(startTime);

        if (!stats) {
          reject(new Error('no stats after building preview'));
        } else if (stats.hasErrors()) {
          reject(stats);
        } else {
          resolve(stats);
        }
      });
      previewProcess = previewDevMiddlewareInstance;
    });
  }); // custom middleware

  var middlewareFn = (0, _middleware.getMiddleware)(configDir);
  middlewareFn(router);
  managerPromise.catch(function (e) {
    try {
      if (!resolved) {
        previewReject();
      }

      previewProcess.close();

      _nodeLogger.logger.warn('force closed preview build');
    } catch (err) {
      _nodeLogger.logger.warn('Unable to close preview build!');
    }
  });
  return Promise.all([managerPromise, previewPromise]).then(function ([managerStats, previewStats]) {
    router.get('/', function (request, response) {
      response.set('Content-Type', 'text/html');
      response.sendFile(_path.default.join(`${outputDir}/index.html`));
    });
    router.get(/\/sb_dll\/(.+\.js)$/, function (request, response) {
      response.set('Content-Type', 'text/javascript');
      response.sendFile(_path.default.join(`${dllPath}/${request.params[0]}`));
    });
    router.get(/\/sb_dll\/(.+\.LICENCE)$/, function (request, response) {
      response.set('Content-Type', 'text/html');
      response.sendFile(_path.default.join(`${dllPath}/${request.params[0]}`));
    });
    return {
      previewStats: previewStats,
      managerStats: managerStats,
      managerTotalTime: managerTotalTime,
      previewTotalTime: previewTotalTime,
      router: router
    };
  });
}