import { StoryId, StoryKind, StoryFn, ViewMode, Channel } from '@storybook/addons';
import { StoryStore } from '@storybook/client-api';
import { RenderStoryFunction, RenderContext } from './types';
interface RenderMetadata {
    id: StoryId;
    kind: StoryKind;
    viewMode: ViewMode;
    getDecorated: () => StoryFn<any>;
}
declare type Layout = keyof typeof layouts;
declare const layouts: {
    readonly centered: {
        readonly margin: 0;
        readonly padding: "1rem";
        readonly display: "flex";
        readonly justifyContent: "center";
        readonly alignItems: "center";
        readonly minHeight: "100vh";
        readonly boxSizing: "border-box";
    };
    readonly fullscreen: {
        readonly margin: 0;
        readonly padding: 0;
        readonly display: "block";
        readonly justifyContent: "initial";
        readonly alignItems: "initial";
        readonly minHeight: "initial";
    };
    readonly padded: {
        readonly margin: 0;
        readonly padding: "1rem";
        readonly display: "block";
        readonly justifyContent: "initial";
        readonly alignItems: "initial";
        readonly minHeight: "initial";
    };
};
/**
 * StoryRenderer is responsible for rendering the correct story to the screen
 *
 * It is very much concerned with drawing to the screen and will do things like change classes
 * on the body etc.
 */
export declare class StoryRenderer {
    render: RenderStoryFunction;
    channel?: Channel;
    storyStore: StoryStore;
    previousMetadata?: RenderMetadata;
    previousStyles?: typeof layouts[keyof typeof layouts];
    constructor({ render, channel, storyStore, }: {
        render: RenderStoryFunction;
        channel?: Channel;
        storyStore: StoryStore;
    });
    setupListeners(): void;
    forceReRender(): void;
    renderCurrentStory(forceRender: boolean): void;
    renderStoryIfChanged({ metadata, context, }: {
        metadata: RenderMetadata;
        context: RenderContext;
    }): void;
    applyLayout(layout: Layout): void;
    showErrorDisplay({ message, stack }: {
        message?: string;
        stack?: string;
    }): void;
    showNoPreview(): void;
    showMain(): void;
    showDocs(): void;
    showStory(): void;
    renderStory({ context, context: { id, getDecorated } }: {
        context: RenderContext;
    }): void;
    renderDocs({ context, storyStore }: {
        context: RenderContext;
        storyStore: StoryStore;
    }): void;
    renderException(err: Error): void;
    renderError({ title, description }: {
        title: string;
        description: string;
    }): void;
}
export {};
