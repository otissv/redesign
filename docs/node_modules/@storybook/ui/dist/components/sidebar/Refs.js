"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ref = void 0;

var _react = _interopRequireWildcard(require("react"));

var _theming = require("@storybook/theming");

var _polished = require("polished");

var _State = require("./Tree/State");

var _ListItem = require("./Tree/ListItem");

var _RefIndicator = require("./RefIndicator");

var _RefBlocks = require("./RefBlocks");

var _RefHelpers = require("./RefHelpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var RefHead = _theming.styled.button(function (_ref) {
  var theme = _ref.theme;
  return {
    // Reset button
    border: 'none',
    boxSizing: 'content-box',
    cursor: 'pointer',
    position: 'relative',
    textAlign: 'left',
    fontWeight: theme.typography.weight.black,
    fontSize: theme.typography.size.s2 - 1,
    // Similar to ListItem.tsx
    textDecoration: 'none',
    lineHeight: '16px',
    paddingTop: 4,
    paddingBottom: 4,
    paddingRight: theme.layoutMargin * 2,
    paddingLeft: 20,
    // 1px more padding than ListItem for optical correction
    display: 'flex',
    alignItems: 'center',
    background: 'transparent',
    marginLeft: -20,
    width: '100%',
    color: theme.base === 'light' ? theme.color.defaultText : (0, _polished.transparentize)(0.2, theme.color.defaultText),
    '&:hover, &:focus': {
      outline: 'none',
      color: theme.color.defaultText,
      background: theme.background.hoverable
    }
  };
});

var RefTitle = _theming.styled.span(function (_ref2) {
  var theme = _ref2.theme;
  return {
    display: 'block',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    flex: 1,
    overflow: 'hidden'
  };
});

var Wrapper = _theming.styled.div(function (_ref3) {
  var isMain = _ref3.isMain;
  return {
    position: 'relative',
    marginLeft: -20,
    marginRight: -20,
    marginTop: isMain ? undefined : 0
  };
});

var Ref = function Ref(ref) {
  var _useState = (0, _react.useState)(true),
      _useState2 = _slicedToArray(_useState, 2),
      isExpanded = _useState2[0],
      setIsExpanded = _useState2[1];

  var indicatorRef = (0, _react.useRef)(null);
  var stories = ref.stories,
      key = ref.id,
      _ref$title = ref.title,
      title = _ref$title === void 0 ? key : _ref$title,
      storyId = ref.storyId,
      filter = ref.filter,
      _ref$isHidden = ref.isHidden,
      isHidden = _ref$isHidden === void 0 ? false : _ref$isHidden,
      loginUrl = ref.loginUrl,
      error = ref.error;

  var _useDataset = (0, _State.useDataset)(stories, filter, storyId),
      dataSet = _useDataset.dataSet,
      expandedSet = _useDataset.expandedSet,
      length = _useDataset.length,
      others = _useDataset.others,
      roots = _useDataset.roots,
      setExpanded = _useDataset.setExpanded,
      selectedSet = _useDataset.selectedSet;

  var handleClick = (0, _react.useCallback)(function () {
    setIsExpanded(!isExpanded);
  }, [isExpanded]);
  var combo = (0, _react.useMemo)(function () {
    return {
      setExpanded: setExpanded,
      expandedSet: expandedSet
    };
  }, [setExpanded, expandedSet]);
  var isMain = key === 'storybook_internal';
  var isLoadingMain = !ref.ready && isMain;
  var isLoadingInjected = ref.type === 'auto-inject' && !ref.ready;
  var isLoading = isLoadingMain || isLoadingInjected || ref.type === 'unknown';
  var isError = !!error;
  var isEmpty = !isLoading && length === 0;
  var isAuthRequired = !!loginUrl && length === 0;
  var state = (0, _RefHelpers.getStateType)(isLoading, isAuthRequired, isError, isEmpty);
  return isHidden ? null : /*#__PURE__*/_react["default"].createElement(_State.ExpanderContext.Provider, {
    value: combo
  }, isMain ? null : /*#__PURE__*/_react["default"].createElement(RefHead, {
    "aria-label": "".concat(isExpanded ? 'Hide' : 'Show', " ").concat(title, " stories"),
    "aria-expanded": isExpanded
  }, /*#__PURE__*/_react["default"].createElement(_ListItem.Expander, {
    onClick: handleClick,
    className: "sidebar-ref-expander",
    depth: 0,
    isExpanded: isExpanded
  }), /*#__PURE__*/_react["default"].createElement(RefTitle, {
    onClick: handleClick,
    title: title
  }, title), /*#__PURE__*/_react["default"].createElement(_RefIndicator.RefIndicator, _extends({}, ref, {
    state: state,
    ref: indicatorRef
  }))), isExpanded && /*#__PURE__*/_react["default"].createElement(Wrapper, {
    "data-title": title,
    isMain: isMain
  }, state === 'auth' && /*#__PURE__*/_react["default"].createElement(_RefBlocks.AuthBlock, {
    id: ref.id,
    loginUrl: loginUrl
  }), state === 'error' && /*#__PURE__*/_react["default"].createElement(_RefBlocks.ErrorBlock, {
    error: error
  }), state === 'loading' && /*#__PURE__*/_react["default"].createElement(_RefBlocks.LoaderBlock, {
    isMain: isMain
  }), state === 'empty' && /*#__PURE__*/_react["default"].createElement(_RefBlocks.EmptyBlock, {
    isMain: isMain
  }), state === 'ready' && /*#__PURE__*/_react["default"].createElement(_RefBlocks.ContentBlock, {
    others: others,
    dataSet: dataSet,
    selectedSet: selectedSet,
    expandedSet: expandedSet,
    roots: roots
  })));
};

exports.Ref = Ref;