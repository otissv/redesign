"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = void 0;

var _react = _interopRequireDefault(require("react"));

var _components = require("./components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var branchOrLeaf = function branchOrLeaf(_ref, _ref2) {
  var Branch = _ref.Branch,
      Leaf = _ref.Leaf,
      Head = _ref.Head,
      List = _ref.List;
  var root = _ref2.root,
      dataset = _ref2.dataset,
      expanded = _ref2.expanded,
      selected = _ref2.selected,
      depth = _ref2.depth;
  var node = dataset[root];

  if (!node) {
    return null;
  }

  return node.children ? /*#__PURE__*/_react["default"].createElement(Branch, _extends({
    key: node.id
  }, {
    Branch: Branch,
    Leaf: Leaf,
    Head: Head,
    List: List,
    dataset: dataset,
    root: root,
    depth: depth,
    expanded: expanded,
    selected: selected
  })) : /*#__PURE__*/_react["default"].createElement(Leaf, _extends({
    key: node.id
  }, node, {
    depth: depth,
    isSelected: selected[node.id]
  }));
};

var Tree = function Tree(props) {
  var root = props.root,
      depth = props.depth,
      dataset = props.dataset,
      expanded = props.expanded,
      selected = props.selected,
      _props$Branch = props.Branch,
      Branch = _props$Branch === void 0 ? Tree : _props$Branch,
      _props$List = props.List,
      List = _props$List === void 0 ? _components.DefaultList : _props$List,
      _props$Leaf = props.Leaf,
      Leaf = _props$Leaf === void 0 ? _components.DefaultLeaf : _props$Leaf,
      _props$Head = props.Head,
      Head = _props$Head === void 0 ? _components.DefaultHead : _props$Head;
  var item = dataset[root];

  if (!item) {
    return null;
  }

  var children = item.children,
      node = _objectWithoutProperties(item, ["children"]);

  var mapNode = function mapNode(i) {
    return branchOrLeaf({
      Branch: Branch,
      Leaf: Leaf,
      Head: Head,
      List: List
    }, {
      dataset: dataset,
      selected: selected,
      expanded: expanded,
      root: i,
      depth: depth + 1
    });
  };

  switch (true) {
    case !!(children && children.length && node.name):
      {
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(Head, _extends({}, node, {
          depth: depth,
          isExpanded: expanded[node.id],
          isSelected: selected[node.id],
          childIds: children
        })), children && expanded[node.id] ? /*#__PURE__*/_react["default"].createElement(List, null, children.map(mapNode)) : null);
      }

    case !!(children && children.length):
      {
        return /*#__PURE__*/_react["default"].createElement(List, null, children.map(mapNode));
      }

    case node.isLeaf:
      {
        return /*#__PURE__*/_react["default"].createElement(Leaf, _extends({
          key: node.id
        }, node, {
          depth: depth,
          isSelected: selected[node.id]
        }));
      }

    default:
      {
        return null;
      }
  }
};

exports.Tree = Tree;