import { SyntheticEvent } from 'react';
import { StoriesHash } from '@storybook/api';
export declare const prevent: (e: SyntheticEvent) => boolean;
export declare type Item = StoriesHash[keyof StoriesHash];
export declare type Dataset = Record<string, Item>;
export declare type SelectedSet = Record<string, boolean>;
export declare type ExpandedSet = Record<string, boolean>;
export declare const keyEventToAction: ({ keyCode, ctrlKey, shiftKey, altKey, metaKey, }: KeyboardEvent) => false | "ENTER" | "SPACE" | "UP" | "DOWN" | "LEFT" | "RIGHT";
export declare const createId: (id: string, prefix: string) => string;
export declare const get: (id: string, dataset: Dataset) => import("@storybook/api").Root | import("@storybook/api").Group | import("@storybook/api").Story;
export declare const getParent: (id: string, dataset: Dataset) => import("@storybook/api").Root | import("@storybook/api").Group | import("@storybook/api").Story;
export declare const getParents: (id: string, dataset: Dataset) => Item[];
export declare const getMains: (dataset: Dataset) => (import("@storybook/api").Root | import("@storybook/api").Group | import("@storybook/api").Story)[];
export declare const getPrevious: ({ id, dataset, expanded, }: {
    id: string;
    dataset: Dataset;
    expanded: ExpandedSet;
}) => Item | undefined;
export declare const getNext: ({ id, dataset, expanded, }: {
    id: string;
    dataset: Dataset;
    expanded: ExpandedSet;
}) => Item | undefined;
export declare const toId: (base: string, addition: string) => string;
export declare const filteredLength: (dataset: Dataset, filter: string) => number;
export declare const toFiltered: (dataset: Dataset, filter: string) => Record<string, import("@storybook/api").Root | import("@storybook/api").Group | import("@storybook/api").Story>;
