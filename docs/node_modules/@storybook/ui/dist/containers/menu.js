"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.search");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenu = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@storybook/components");

var _theming = require("@storybook/theming");

var _shortcut = require("@storybook/api/shortcut");

var _Menu = require("../components/sidebar/Menu");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var focusableUIElements = {
  storySearchField: 'storybook-explorer-searchfield',
  storyListMenu: 'storybook-explorer-menu',
  storyPanelRoot: 'storybook-panel-root'
};

var shortcutToHumanStringIfEnabled = function shortcutToHumanStringIfEnabled(shortcuts, enableShortcuts) {
  return enableShortcuts ? (0, _shortcut.shortcutToHumanString)(shortcuts) : null;
};

var useMenu = function useMenu(api, isFullscreen, showPanel, showNav, enableShortcuts) {
  var theme = (0, _theming.useTheme)();
  var shortcutKeys = api.getShortcutKeys();
  var about = (0, _react.useMemo)(function () {
    return {
      id: 'about',
      title: 'About your Storybook',
      onClick: function onClick() {
        return api.navigateToSettingsPage('/settings/about');
      },
      right: api.versionUpdateAvailable() && /*#__PURE__*/_react["default"].createElement(_components.Badge, {
        status: "positive"
      }, "Update"),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var releaseNotes = (0, _react.useMemo)(function () {
    return {
      id: 'release-notes',
      title: 'Release notes',
      onClick: function onClick() {
        return api.navigateToSettingsPage('/settings/release-notes');
      },
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var shortcuts = (0, _react.useMemo)(function () {
    return {
      id: 'shortcuts',
      title: 'Keyboard shortcuts',
      onClick: function onClick() {
        return api.navigateToSettingsPage('/settings/shortcuts');
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.shortcutsPage, enableShortcuts),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null),
      style: {
        borderBottom: "4px solid ".concat(theme.appBorderColor)
      }
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var sidebarToggle = (0, _react.useMemo)(function () {
    return {
      id: 'S',
      title: 'Show sidebar',
      onClick: function onClick() {
        return api.toggleNav();
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.toggleNav, enableShortcuts),
      left: showNav ? /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, {
        icon: "check"
      }) : /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys, showNav]);
  var addonsToggle = (0, _react.useMemo)(function () {
    return {
      id: 'A',
      title: 'Show addons',
      onClick: function onClick() {
        return api.togglePanel();
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.togglePanel, enableShortcuts),
      left: showPanel ? /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, {
        icon: "check"
      }) : /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys, showPanel]);
  var addonsOrientationToggle = (0, _react.useMemo)(function () {
    return {
      id: 'D',
      title: 'Change addons orientation',
      onClick: function onClick() {
        return api.togglePanelPosition();
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.panelPosition, enableShortcuts),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var fullscreenToggle = (0, _react.useMemo)(function () {
    return {
      id: 'F',
      title: 'Go full screen',
      onClick: function onClick() {
        return api.toggleFullscreen();
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.fullScreen, enableShortcuts),
      left: isFullscreen ? 'check' : /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys, isFullscreen]);
  var searchToggle = (0, _react.useMemo)(function () {
    return {
      id: '/',
      title: 'Search',
      onClick: function onClick() {
        return api.focusOnUIElement(focusableUIElements.storySearchField);
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.search, enableShortcuts),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var up = (0, _react.useMemo)(function () {
    return {
      id: 'up',
      title: 'Previous component',
      onClick: function onClick() {
        return api.jumpToComponent(-1);
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.prevComponent, enableShortcuts),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var down = (0, _react.useMemo)(function () {
    return {
      id: 'down',
      title: 'Next component',
      onClick: function onClick() {
        return api.jumpToComponent(1);
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.nextComponent, enableShortcuts),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var prev = (0, _react.useMemo)(function () {
    return {
      id: 'prev',
      title: 'Previous story',
      onClick: function onClick() {
        return api.jumpToStory(-1);
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.prevStory, enableShortcuts),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var next = (0, _react.useMemo)(function () {
    return {
      id: 'next',
      title: 'Next story',
      onClick: function onClick() {
        return api.jumpToStory(1);
      },
      right: shortcutToHumanStringIfEnabled(shortcutKeys.nextStory, enableShortcuts),
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  var collapse = (0, _react.useMemo)(function () {
    return {
      id: 'collapse',
      title: 'Collapse all',
      onClick: function onClick() {
        return api.collapseAll();
      },
      right: enableShortcuts ? (0, _shortcut.shortcutToHumanString)(shortcutKeys.collapseAll) : '',
      left: /*#__PURE__*/_react["default"].createElement(_Menu.MenuItemIcon, null)
    };
  }, [api, shortcutToHumanStringIfEnabled, enableShortcuts, shortcutKeys]);
  return (0, _react.useMemo)(function () {
    return [about].concat(_toConsumableArray(api.releaseNotesVersion() ? [releaseNotes] : []), [shortcuts, sidebarToggle, addonsToggle, addonsOrientationToggle, fullscreenToggle, searchToggle, up, down, prev, next, collapse]);
  }, [about].concat(_toConsumableArray(api.releaseNotesVersion() ? [releaseNotes] : []), [shortcuts, sidebarToggle, addonsToggle, addonsOrientationToggle, fullscreenToggle, searchToggle, up, down, prev, next, collapse]));
};

exports.useMenu = useMenu;